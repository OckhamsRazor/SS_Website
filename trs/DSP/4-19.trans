那我就可以做底下的這個演算法
那這個呢就是所謂的
嗯它也有一個名字是 k  means  algorithm
或者是 low  and  max  algorithm
那你可以看得出來這是兩個人的名字
而這是它的原來的意思
那這個演算法意思很簡單
雖然不怎麼好用但是呢是容易了解
所以一般我們都會先講這個
那這個的意思是
像這樣我們舉例來講以 two  d 為例
假設我有一堆 data 在這裡
假設說我們要做的 data 是聲音
然後這是 two  d 就是相鄰兩個 sample
這是一個 vector 的話
我就把一大堆聲音的相鄰兩個兩個 sample 的 vector 通通拿進來
就變成一堆 data 在這裡
然後呢我做哪兩個 step呢
第一步是先 fix 我的代表值
然後去找它們的區域
譬如說我先假設假設有一個代表值在這裡
一個代表值在這裡
一個在這裡
一個在這裡
那麼我先設這四個值之後
我想辦法去找這個
那怎麼找呢那它就是根據每一點去看
每一點去找
它跟這四個代表值的 distance
剛才 define 的 distance 就用在這裡啦
我每一點都去看它跟這四個的 distance 跟誰最近
跟誰最近呢它就歸給誰
於是呢像這個跟它近歸給它
這個跟它近歸給它
這個跟它近歸給它這個跟它近歸給它等等
這個歸給它這個歸給它
你每一個呢都根據 distance 去算它跟誰近就歸給誰
當你把這個歸好之後
其實這個 boundary 就出來了
譬如說這些東西都歸它於是呢我的 boundary 就是在這裡
這些東西歸它那 boundary 在這裡
這些東西歸它 boundary 在這裡
那麼呢 boundary 在這裡
那這就是我的第一個 step
第二個 step 呢反過來
我假設我的 boundary 確定了
就我的每一個 j  k 確定了
我要重新找它的代表值
於是呢如果這一些已經知道這是一個 boundary 的話
這是一塊的話呢
這裡面到底哪一點才是最最能夠代表這些的呢
我要把這裡面的點重新去看一次
發現其實我如果把這一點
搬到這邊來的話
那麼每一個跟它的距離加起來才是最小的
它的 distance 才最小所以應該搬到這邊來
同理呢這一點也不是最理想的我應該把它搬到這邊來
這一點也不是最理想的我應該把它搬到這邊來
這一點也不是最理想的我把它搬到這邊來
那這樣子我就完成我的第二步
之後我就再繼續 iterate
我現在這個用新的這四個點做為代表之後重新把這個擦掉
boundary 擦掉重新再來
那麼這時候我得到新的 boundary 可能會變成在這裡然後在這裡在這裡在這裡等等
那樣子經過若干個 iteration 之後它會收斂
收斂的應該就是比較好的
那這就是所謂的 k  means
那你看名字就知道求 k 個 mean 嘛
那每一個就在求它的 mean 嘛這樣的意思
那如果說得詳細一點的話呢就是這邊寫的式子
所以第一步是怎麼做呢
就是我們剛才講就是把每一點都去求它的 distance看它跟誰最像
距離最近就歸給它
所以呢所謂的 j  k 是什麼
就是所有的那些個 x 它跟 k 第 k 個代表值的距離才是最近的
跟別的 distance 都比較遠的
那那些個 x 的集合呢就是 j  k
那這個目的很顯然就是讓我的 total  distance 最小嘛
我在 minimize  total  distance 啊
那我如果每一點都歸給跟它最近的那個 distance 的話
那這樣子它都歸它它都歸它的話呢
那這樣的話我的 total  distance 一定最小
所以呢我其實就是在 minimize  total  distance
而這個 condition 其實就是所謂的 nearest  neighbor
那麼我每一點看這幾點誰是我的 nearest  neighbor 就歸給誰
那第二塊的意思呢是反過來
那其實就是給我這堆之後呢裡面看哪一點最能代表大家
那很直覺的就是求它的 mean
那求它的 mean 其實是針對剛才那個歐幾里得 distance 而言
我們剛才講你可以 define 各種 distance
你可以 define 各種 distance
那如果是歐幾里德 distance 的話
那麼這個 total  distance 最小的條件就是
total  distance 最小的條件就是你取它的 mean
於是呢你每一個我都求它的 mean 就是最好每一個求它的 mean
那這也就是 k  means 這個名字的來源
那這樣之後當然我就讓每一塊各自都有最小的 distance
那這個 mean 其實就是所謂的 centroid 就是你的質心嘛
那麼這個那這樣這兩招之後就是我這個 iteration 不斷進行
那我怎麼收斂
因為你每走你每走一個 iteration
我的 total  distance 一定在減少
因為每一次都在 minimize 這個 distance
那這邊是把每一塊的 distance都在 minimize
那把每一塊 distance 加起來就是我的 total  distance
所以我就看 total  distance 應該是一路在減少
然後什麼時候少到不會少了我就給它停止
那這個就可以收斂了
那麼它一定會收斂為什麼因為我的 distance 是正的
我的 distance 是一個正值
但是呢我每一個 iteration 之後呢我的 distance 一定會降低所以它最後一定會收斂