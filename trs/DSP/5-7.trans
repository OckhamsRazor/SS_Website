那這是另外一件件事情就是所謂的cart 
就是classification and regression trees 
這個在嗯這是另外一個領域裡面一個重要的方法
這個領域嗯這個東西在嗯either 是這個data mining 裡面
or 是machine learning 裡面
or 是pattern recognition 裡面
它們大概都會講一堆這種這種東西
那我們等於是說把它拿來用
那麼嗯這邊舉的是一個非常簡單的例子來說明這個在幹嘛
那底下我們是要用它來做tri phone 的train tri phone
而train 的時候要用什麼
要用剛才的entropy
所以我們在講的這堆東西是這樣來的
好那我們先說這個是在幹嘛我們們這個這個是用一種tree 的structure 
像這樣一種tree 的structure 來幫助我們來這個把一大堆的data 把它如何把它結構化
讓它的structure 清楚哦等等
這是什麼意思我們舉這個例子來說明這個例子其實是課本的例子
你如果看課本的話在我這邊的給你的這個課本的reference 裡面哦
哦在這個裡面
它就是就是就有這個例子
那我其實就把課本上的例子拿下來講就是了
它說假設說這個區公所裡面拿到一群人的data 
這個區公所裡面有這一區的這一鄰或者這一里的居民的data
那它要根據這一群的data 把這一群人呢分成根據他們們的身高分成五群
最高的一群
普通高的一群
跟中等身材的一一群
跟稍微矮的
跟最矮的
分成五群
那區公所的這一群人的data 它有很多很多資料
譬如說他的年齡他他的性別他的工作等等等等
就是沒有身高
那你就要根據你所知道的訊息譬如說年齡啊性別啊工作等等
根據這些去判斷說沒有身高那你現在要根據身高來分成五群怎麼分
那這個時候我們要做的事情其實是跟剛才講的是很像的
是這樣的一件事
那麼我們姑且可以想像成說
ok 這些人的身高也是有一個distribution 的
那這個distribution 也許不太容易看
我們就把它當成是discrete 
那麼最矮的人的身高是叫做 x x one 
最高的人叫做x m
那麼他們各有一定的distribution 在這裡
那我現在要把這些人的身高
所以所以這些這些就就是它們身高的distribution 
我要把它們身高分成這五群
那最高的這一群在這裡譬如說
這是最高的大t 
然後這邊呢是是小t 是第二高的
中間這些是中等身材的m 
然後這邊是比較矮的
叫做s 
然後呢這邊是最矮的這群叫做大s 等等
我等於是要做這件事情
我要把它們的這個這個根據他們的身高分成五群
那我有很多data 
有的是說他的年齡有的是說他的性別說他的工作等等
就是沒有身高
我有根據這些其它的data 來分他們的身高
那怎麼分呢
你想個辦法做一個tree 
那就他這個case 而言他說呢ok 
我先說他的年齡是不是大於十二歲
這個理由是說假如小於十二歲就是小孩
小於十二歲的話大概是小孩小孩總是最矮的
所以呢凡是呢所以呢如果說凡是小於十二歲的話呢
就歸成最小的這一類最矮的
那大於十二歲以後不表不表示他一定最高
這時候怎麼辦呢我們再來分
那第二個呢他就說呢我根據什麼來分呢
根據他的職業
如果他是職業籃球隊的哦那顯然是最高的
所以呢只要他是職業籃球隊的我就分到就是屬於這個
那就是最高的
那麼如果那這是把最矮的跟最高的分出來了
那中間這堆人怎麼辦呢不知道
不過呢他有一個data 他說呢每週喝多少牛奶
ok 那supposed 每週喝牛奶喝很多的會比較高
所以呢每週喝牛奶多的呢就屬於第二高哦就屬於這一層
那那每週喝牛奶喝完之後怎麼辦呢
那剩下呢他就說看他是男的還女的
那這一群人可能男的比較高女的比較矮
所以呢他就如果又不是小孩對不對
又不是小孩所以不然如果小孩就男生可能特別矮
又不是打職業籃球隊籃球隊的話女生也會很高對不對
那到了這群人的時候那大概就是ok 男生會比女生高
所以呢男生的話呢就是屬於中間這群
女生就屬於稍矮的這群哦這樣子
那它這樣就構成一個tree 
也就是說我在這個tree 的每一個note 是根據一個question 來分
說它是屬於哪邊這樣把它分出來
那問題是你這個tree 夠不夠好
怎麼樣才能做到一個有效的做法呢
那一個可以做的方法就是用我們這邊講的這個entropy 
那這個entropy 是幹嘛呢其實就是在做我們這邊講的事情
那你可以想像成
我們剛才那個tree 是怎樣
就是把一個node 拆成二個node
不斷地在做這件事情
假設我原來這個node 是叫做n 
我把它拆成a 跟b 的話
它不斷地在做這個用一個question 或者用一個criterion 來判斷
把那群人拆成兩半
它就不斷在做這件事情之後構成一個tree
最後把它拆成剛才看到這五群
那它怎麼樣做這件事呢
那基本上這個你可以想像
最理想的情形是說
我們如果畫小一點它這樣子拆成這樣子
剛才這樣子拆法
我一開始上面的所有的人都在這裡
但是我會希望最後拆出來的時候呢在這邊的是什麼
是某一群
就剛好是譬如說這一群
其它都是零
剛好就是這一群
那這邊呢剛好是另外一群
其它都是零
對不對
那這邊剛好是另外一群
最好是這樣子
就是這一群其它都是零
也就是說如果要這樣子做的話呢
很可能就是我希望每一次一拆的時候
就是從這邊切開來或者從這邊切開來或從這邊切開來
我每一次如果我每一次的這個split 這個node 
這個node 如果這樣子split 的時候每一次都是可以這樣子切這樣子切這樣子切的話
那它就一塊一塊就切出來了
可是我如果是做得不好會切成這樣子的話呢
就不好了
這意思是說我如果每一個這樣split 的時候呢我是從這裡再這裡這樣切或者這樣子切的話
都有效我這樣的話就就就就就可以把它這樣一次這樣切一次這樣切把它切開來
就得到一群一群的
可是我如果這個node 做不好的話我如果弄了一個這樣子切的話呢
這樣一切就一點用都沒有
等於白切了
那麼舉例來講
它如果區公所用的一個是譬如說這個學歷
學歷可能就跟身高沒有關係
它這邊用的都是剛好跟身高會有關係的
所以你這樣一切的時候看我儘可能我儘可能是希望是這種的對不對
我如果弄個學歷的話搞不好大學畢業的有最高的也有最矮的
那麼幼稚園畢業的也有從最高到最矮都有嘛
那所以你這樣如果用學歷這樣一切的話
可能就沒有意義了
那當然實際上你可能雖然你要避免切成這樣切法
但你要真的這樣切可能是做不到的
那你真正會做成怎樣的你很可能會做成這樣子
就是我切一個可能是這樣子切的
譬如說那麼於是呢比較多的在這邊
這邊比較少
但是你不至於說完全沒有啦
嗯就是就是你可能切成一個這樣子的
