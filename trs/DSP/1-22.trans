那這個我們剛才說過了我們不多說這個對話我們剛才也已經說過了那麼這也是個很重要的這個整合性的那麼我們舉例來講這個喔
剛才已經舉過例了所以不用舉例那麼應該說是我們所有的人跟網路的互動最可能的方式就是用這樣口語的對話來達成
那麼這個時候我需要東西呢包括語音的辨識還有 understanding 所以我你看我這邊我畫的是 recognize 加上 understanding
也就是當你說我要打開信箱的時候我不是要辨識打開信箱那四個字那是這邊做的事我真的要做的是要 understand 他是要開信箱的這件事
所以我要有 understanding 然後呢我顯然要造句來合成
現在都已經做的很好那麼打電話買飛機票的情形呢你可以想像是前一張表
出發地點是哪裡
ok 台北目的地是哪裡紐約等等
那就好像前一張表一樣然後由系統一一去問 user
每一個問題 user 回答就填進來
當表填完的時候我就可以買飛機票了
那麼因此他可以說請問你要去哪裡紐約
請問你要從哪裡出發台北
請問你要哪一家航空公司長榮那請問你要哪一天出發星期天
這樣子那就那這種情形就是由系統來主導就是所謂的 system  initiative
這是最穩的方法
但是呢 user 可能會很不喜歡這樣叫我一個一個去填這些問題
user 會希望一個比較自然的那最自然的是所謂的 user  initiative
完全由 user 來主導
就好像你打電話給一個旅行社你就說欸我明天要到紐約去啊你怎麼怎麼他就跟你講然後你就可以買到飛機票
這樣是最好的不過這樣子的 user  initiative 的對話系統今天並不存在因為那個太難了
那麼我們今天比較作得到的是屬於中間的所謂 mixed  initiative
就是基本上由系統來主導但是 user 不一定要完全照系統叫你說什麼就說什麼
而是可以說一點別的系統說請問你到哪裡去我說啊我明天要從台北到紐約
你講的跟他講的不太一樣但是他還是都知道台北到紐約明天那這樣的話呢就是我們所謂的 user  initiative
今天技術大概最多做到這樣就是 mixed  initiation 你想要真的跟 user  initiative 一樣就是跟你任何一個 user 打電話到旅行社一樣
你跟他說什麼啊我要幹麻幹麻他都跟你講這種技術現在還不存在
那麼這樣的 dialogue 同時我們也常常需要 worry 一些最重要的事情
第一個就是 reliability 嘛你跟他講什麼要買飛機票要買對啊不能買一張錯的飛機票
那麼這個是非常重要的問題要獲得 reliability 最好的方法就是用 confirmation
不斷的跟他 confirm
那麼你剛才的那個查號台你會發現他會問你你要的是土銀嗎
就是因為那個土銀土地銀行他沒有確認對不對
有點懷疑所以他就問請問你是要的是土銀嗎那這就是 confirmation
那麼 confirmation 是幫助 RELIABLE 很好的方法
但是多了呢也會很 boring 你可以想像我最 RELIABLE 的方法就是每一次都 confirm 一次請問你要到哪裡去紐約請問你是去紐約嗎是的
請問你從哪裡出發台北請問你是台北出發嗎是的你在這樣一個個下來當然會對啦不過這個實在是太 boring 了
所以你要有一個辦法讓他
那就是那因為那個字非常不 efficient 嘛你如何兼顧 RELIABLE 又 efficient
這是 dialogue 今天不能解決的很難的問題
那當然要做到這個就跟這有關就是這個 manager 如何
如何來 control 這個 flow 這個整個 dialogue 的流程
到底怎麼樣的譬如說我們剛才講他說請問你到哪裡去他說我明天早上要去紐約
他已經把多講了好些東西了
那如果系統能夠知道的話那最好啊那我就跟著這個往下走啊等等
那如何去根據 user 說什麼我隨時管這個流程讓我的這個更 efficient
這些都是這個相關的問題那我們通常最基本的兩個參數來描述他好不好的
一個就是 success  rate 也就是你要買飛機票最後真的買對了而且買成功了的成功率是多少
還是最後人家受不了把電話掛掉的機率有多少那這個就是 success  rate
那麼另外一個就是 average  number  of  dialogue  turn
也就是所謂的你所謂的這個 turn 就是就像下棋一樣我走一步叫做一個 turn 他再走一步叫做一個 turn
那對話就是我講一段他講一段這分別是一個 turn 那到底我從頭到尾到底把飛機票買成的時候到底用了多少的 turn
那 turn 的數目是愈少表示愈 efficient  turn 數目愈多就愈有問題所以呢通常這兩個是最常用的
這個 turn 的數目用來描述 efficiency 那個 success  rate 用來描述 reliability 等等好這個是對話系統
