就這種而言這client server 的怎麼辦
你你的m f c c 怎麼做compression 呢
那最常用的就是底下這張圖就是所謂的split vector quantization 
你譬如說我們有十三個m f c c 
我這十三個m f c c 可能包括一個energy 
那我就兩兩做一個v q 兩兩做一個v q 
於是我就可以得到分別去有optimize bit allocation 
譬如說這個比較重要我給它八個bit 
做一個八個bit v q 
這個呢我做七個bit 七個bit v q 
這個做六個bit v q 這個做五個bit v q 等等
那你因為兩兩的v q 是只有兩個
是很容易做計算量很少
在手機就直接做這個v q 是很容易做的
而這樣一來這個八個bit 這個七個bit 什麼什麼的話我這個bit 數目可以變得很少
所以呢我在傳送的時候我把這些v q 的參數再放到packet 裡面去傳送
那我的error 也很少喔
那麼需要的bit rate 也很少
所以這個是今天多數做這個領域的人所用的方法
所謂的split 意思就是說我不是這十三個一起做一個v q 
你也可以十三個一起做一個v q 啦不過如果十三個一起做一個v q 的話你計算量就很大了
那個v q 就會計算量很大
這樣你拆成很多小的話呢
就是所謂split v q 
你就是這樣的話你每個計算量都很小
那這個是這個喔最常用的辦法
然後呢你要想辦去做error protection 
因為這些東西錯的話麻煩就比較大了
你想辦法做error protection 就是你在你把這些bit 放到packet 裡面去的時候
你要加各種的error control 的方法
那麼你可以想像你不同的bit 
重要性可能不同
有的可能比較重要有的可能不重要
所以呢你最好是讓它不同的參數
有不同的或者不同的bits 給它不同的error 這個correction 或detection 的方法
那讓它比較重要的bit 可以保護得很好阿
然後比較不重要的bit 我就比較隨便一點
那然後呢阿很重要一個問題你還是一樣要跟現有的無線網路的平台相容嘛
就是你不能自己做一個說我怎麼怎麼怎麼做
那人家現在的無線網路人家根本不做這件事的話
你塞不進去嘛
所以呢這都是跟現這個是engineering problem 
就是說你必需跟很很所有的現有的平台要能夠相容塞得進去
那還有一點就是說呢你你不要把它想得這個全部都錯的
那我今天如果是這個錯的話
我也許只要想辦法再再我如果做error detection 
知道是這個錯
別的都還是對的
那我只有處理這個錯就好
等等這就是你如果能夠知道error 發生在哪裡
那是最好的
那然後呢這個另外一招就是所謂error concealment 
就是你怎麼樣子你知道它錯了你怎麼樣把它補回來
你把它補回來然後做一個很像的貼上去
看起來好像沒有錯一樣
這所謂error concealment 
那一個最簡單的辦法這是講裡面最簡單的辦法就是說外插法啦
外插法就是說我今天有假設我現在有這一個一個的feature 
feature vector 
這樣子送過來
這是t 
t 加一t 加二等等
這是一堆一堆feature 
我今天如果發現這個錯掉了怎麼辦
我如果這個錯掉的話呢那我可以拿前面這個你可以想前面這個可能跟它最像
所以拿前面這個去
然後呢前面這幾個可能也都比較像
光用這一個也許不太可靠這裡面也許也有錯啊
所以我就拿前面這幾個喔
所以像這個case 就是說我拿t 減k t 等於一到l 
我就拿前面的l 個
做一個平均
然後呢那畢竟還是最近這個最可能嘛
所以我就用跟最近的t 減一這個
來做一個interpolation 
所以這個乘上beta 這個乘上一減beta 
那這樣的話呢拿拿這個跟拿這堆一起做個interpolation 之後呢
來取代這個
那這是一個很簡單的做法
當然效果不見得很好
那當然你也可以做內插的
這是外插這是內插
內插就是說你也可以拿後面的嘛
你如果可以把後面這些東西也弄進來幾個
然後呢一起做
那這個就是所謂內插
那你也可以用別的方法等等
那最好就是說你不要當成這整個vector 都錯了
不要都當成這整個都錯了
而是這個如果你知道是這個錯
你知道是這個錯我別的就都算對
我別的都算對
我只是這個用這個跟這個對不對
喔我只是用這個來算這個
那別的我都知道是對的話是最好
但是當然這個就你要用更多的error control 的bits 放在裡面才知道說是這個錯別的是對
那那這個就是最基本的想法
那當然你真的詳細做有很多學問就是你怎麼樣去管這個error 
你從頭從頭就開始怎麼樣處理到最後
然後怎麼樣讓這個error 的效果能最小等等
我想我們就不多說下去了
