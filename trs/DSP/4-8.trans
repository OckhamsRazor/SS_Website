我們來看 problem  two  problem  two 就比較麻煩了
他我現在想希望得到的是 state  sequence
我我希望得到這個 state  sequence
我剛才並沒有真正的去求 state  sequence 我剛才是把全部的全部加起來了
這裡面有無限非常多個 state  sequence 就 n 的 t 次方種 state  sequence 都在這裡面
我可以這樣我可以這樣我我全部都算在裡面了
但是到底哪一個才是最可能的 state  sequence 我們沒有講
那我們 problem  two 是要來解說
到底哪一個是最可能的哪一個是最可能的 state  sequence
求這個 q
那也就是說呢我的 sequence 總共是有 n 的 t 次方個
但是其實裡面應該有個機率最高的那一個
機率最最高的那一個可能是譬如說這樣走這樣走這樣走這樣走
最後走到這來
那那一條才是機率最最高的那一個我要求那一個
這是 state  two 這個 problem  two 的問題
那 problem  one 的話我沒有算這個問題 problem  one 我是把全部通通加在一起算他的機率
那我 problem  two 現在是要找機率最高的那一條 path
在這個圖而言就是要找機率最高的那一條 path
那在這邊來講的話就是要找那個 state  sequence
那這裡我們要解釋一下就是
這邊講的這三個 problem 我們都做 general 的假設並沒有簡化的假設
我們講過簡化的假設是
我只是 one  d 的每一個 state 跳到下一個
他不可以跳回來的
那麼然後呢他一定從第一個 state 開始走的
把這些假設放進去之後在這個圖上有一點不一樣哪一些地方不一樣呢就是
譬如說這邊一開始是零這一堆有一堆是零
因為你要從這邊開始走
然後開始慢慢慢慢 spread 開來
一開始這上面是是沒有的一開始一定從這開始
如果有了那個假設的話而且我的 path 只能向上走不能向下走對不對
他那邊就是只能向右走不能回去的意思就是說只能向上走不能向下走
所以在在那樣的假設之下這個問題會稍微簡化一點
但是我們現在講的這三個 problem 我們現在講法是沒有做那個假設
沒有做那個假設所以我並沒有假設說這邊會是零
然後也沒有假設說他一定只能向上走他也可以向下走
好
那我們現在再來看這個 problem  two 怎麼解法呢
那麼一個簡單的辦法是
再定義第二個 beta 叫做 backward  variable
 beta 是一個 backward  variable
然後呢我們也有一套演算法來算這個 beta
那這個呢叫做 backward  algorithm 就是往回走的那麼就有這個所謂的
那麼這個是什麼呢我們底下來解釋不過他的意思是跟剛才剛好反過來
就是說呢我是從先算最後這一行
我也是一樣 define 另外一套東西叫做 beta  t 的 i
我 define 這堆東西
也是一樣他是對每一個 t 每一個 i 就跟這個完全相同
每一個 t 每一個 i 上面都有一點都有一個數字所以呢等於這每一點都有一個數字
不過他是這個東西然後呢我我反過來
我是先從先算最後一行
然後你只要有前面一行就可有後面一行就可以算前面一行有後面一行就可以算前面一行這樣一路倒回去
把它全部填滿這個叫做 backward  algorithm
然後呢我們求出來的這個東西叫做 backward  variable
 backward  variable  beta  t 的 i
那麼底下我們講的就是這件事
那我們後面後面會看到怎麼用這個來來用就是了
好那麼我現在先來看什麼是這個 backward  variable  beta  t 的 i
他的定義是 given 這個 model
然後呢我要 given 說我 state  i 在 state 這個在在在 time  t 的時候是在 state  i 上面
 ok  time  t 在 state  i 上面然後呢我是從 t 加一開始看到大 t
好那我們現在把剛才這個都擦掉
我們看這個 case 是什麼
如果我的時間 t 要在 i 上面的話
我還是一樣是時間 t 要在 i 上面
但是呢
有點不太一樣的是說我看到的是從 t 加一到大 t
所以我看到的是從 t 加一開始的
到大 t 但是我完全都沒有規定這樣子我這邊都看到了
從 t 加一開始都看到了我都完全沒有規定但是我要 t 的時候要在這點上
這個叫做 beta  t 的 i
 ok
那麼因此呢你看到就是這樣子
我要在時間 t 的時候是在 i 上面
然後我看到的是從 t 加一開始看到大 t
這個定義跟剛才有一點有一點對稱但是不完全像喔什麼地方
不完全像呢我們可以仔細看一下
剛才的這個時間 t 在 i 的時候是放在這條槓的左邊是要算機率的
我現在是放在這條槓的右邊是一個條件
你看一下
我剛才的 alpha  t 的 i 這個這個在在 time  t 是在 state  i 這件事情是在槓的左邊
是算機率要算進去的那我現在呢
如果在 beta 這裡的話呢是在槓的右邊是一個 condition 而不是算機率的是一個條件
那為什麼會這樣我們待會會解釋
還有一點不同的是
我現在如果是算 t 的 beta  t 的話這個如果是 t 的話
我這邊裡面沒有 t 我是從 t 加一開始往後看 t 是沒有的
對不對這裡沒有 o  t
但是如果剛才的 alpha 的話呢
這個如果 t 的話這邊 t 是在這裡的
所以呢我是如果算 alpha 的話是我是把 t 算進去的
而 beta 的話呢 t 是不算進去的
 ok 那就是為什麼我剛才算你記得我剛才算畫 alpha 這張圖的時候我是這樣畫的
我說如果時間 i
時間 t 在 state  i 的話呢
我是這樣子看的
也就是這個機率要算進去
另外前面的呢都可以算但是我這點是要算進去的
但是我現在的話這點是沒有算進去喔時間 t 在 i 的這點沒有算進去
所以我是這樣子這邊並沒有這樣包進來
那也就是說在這個 t 的時候
在這個 t 的時候在這邊是沒有 t 的
這為什麼也是有原因的我後面會解釋
哦那這是兩點不同的地方其他的看起來是很像
就一個是這個從一個是 given 前面一個是 given 後面
一個是看到前面一個是看到後面
好那我們現在先來看他的這個怎麼算這個這個所謂的 backward  algorithm
那這個講起來其實也一樣不難
那反過來意思就是說我先從最後這一行開始填起
我如果在 t 的部分都可以填起來的話呢我就可以填前面一行我的這個這個
 iteration 就是有了後面一行就算前面一行有了後面一行就算前面一行有了後面一行就算前面一行就這樣一路算下去
那麼一開始我後面一行最後一行怎麼算他說全部都給他一
這個條件其實有點怪怪的
但是呢哦為什麼怪怪的呢其實講起來很簡單因為其實在最後這一行是 undefined
為什麼呢你看我的 beta  t 呢是指看到 t 加一以後的
當我如果 beta  t 是這一點的話呢是指我看到 t 加一以後的
所以如果這個 t 變成大 t 的話在這邊的 beta 什麼是看到大 t 以後的阿
應該是講大 t 加一以後的機率
可是大 t 加一以後根本就沒有
所以那個算什麼其實是根本在不在上面的定義裡面 ok
也就是說你這裡的這個大 t 如果是大 t 的話其實不在上面這個定義裡面
因為上面定義是要講大 t 加一以後的東西根本就沒有嘛
所以這裡根本沒有上面的定義所以我們就隨便隨便 define
目的是說我 define 之後後面要通
也就是說像他這邊他就說我全部讓他是一
這當然不是隨便亂設的他讓他隨便都是一之後
你根據他的這個演算法
給我這一行去算前面一行給我這一行去算前面一行對這個演算法我也從這個通通都是一來算前面一個看看對不對
那它 turns  out 就是當我都設成一的時候把它再算前面一個的話呢用那個演算法來算它發現是對的
所以它可以這樣子做 ok 所以呢我們要先來講這個這個呃 algorithm 也就是說它的 iteration 的過程
如果我有了 t 加一的話要算 t 怎麼算
就是向前算嗯如果我 t 加一這一行如果我 t 加一這一行都有了的話
我如何算 t 的那一行
如果這個 iteration 沒問題了
那我們現在拿這個來做在我最後一行假設它都是一的情形之下看看通不通
欸也通於是我就假設它後面都是一是這樣來的
好那我們現在來看這個怎麼算這個其實跟剛才很像只不過反過來
如果我有了 t 加一怎麼算 t 呢
你看我要的 t 是這樣是指 t 的時候在 i 上面但是要前面全部的機率
那我如果有 t 加一的 j 的話 beta  t 加一加上 j 的時候是這個
那這個時候會是怎樣呢譬如說我們說這個是 j
 t 加一的 j 是這一個 beta 的 t 加一的 j 呢是說
我 t 加一的時候是在 j 上面但是我看到的是 t 加二以後的
這是 t 加二我看到的是 t 加二以後對不對根據我們剛才的定義對不對
也就是說你現在 t 加二以後我都有了然後 t 加一在 j 上面
不過我沒有算他的機率對不對就是那這這就是這個東西
那如果是這樣的話呢那我顯然應該還要再把 t 加一的那個機率算進來
因為我們剛才講過 beta 的定義都沒有把它算進去 beta 定義所以 t 加一的 beta 我沒有把 t 加一算進去
所以我現在要把 t 加一放到那裡去把它的機率算進去那這樣的話得到就是我黃色這個
這邊後面都有了但是這邊是在這裡
可是當然我也可以這邊在這裡阿
也可以這邊在這裡阿對不對譬如說在這邊在這裡這個 case 是
是 t 加一在這裡但是這邊是後面都有的這顯然是一個
然後呢那這裡顯然也是一個 t 加一在這裡那這後面都有的
也是一個對不對那你把這些都全部加起來那就是這個
然後你還要一個什麼呢還要一個 a  i  j
那這時候呢它可以這個可以這樣過來可以這樣過來可以這樣過來
我每一個機率都要算進去
那全部算進去之後呢我現在就得到現在在這裡而這以前都可以的
那就是這個就是 beta  t 的 i
 ok 所以你仔細看這個式子其實不難啦它的意思其實就是這樣子嘛
我的 beta 的 t 加一的 j 是指說我 t 加一的時候在 j 上面
然後前之後的通通都算但是這點呢沒有算
但是 t 加一可以是所有的 j 阿
那我就每一個 j 都要算都要嘛但是呢都是後面通通都算了
但是呢這個是在所有的 j 上面都要
那所以呢我就所有的 j 都要然後呢我都要 a  i  j 他們都要從 i 跳過來所以都要 a  i  j
然後呢我要把這個 t 加一的這個東西放在每一個 j 裡面去都有機率嘛那就是中間這一項
我這個通通都乘起來然後通通加起來於是我就把剛才的這一個
跳到向前剛才的這一個向前跳到這來於是我就把多把中間這一行的機率都算進去了
對不對我等於把中間這一行機率都算進去之後向前跳跳到這一行
那麼由此的話呢於是我這一行有了前面一行我就可以算後面一行
因此呢這就是我的這個 backward  algorithm
我就可以向前算
所以我從 t 減一 t 減二一路往前算一樣的填這張表我就可以把這個表全部填完
那每一點都是一個 beta  t 的 i
當這個 iteration 的這個式子看起來沒問題的時候我們再回來看剛才這個 initialization
我們說一開始把它設成一好像沒什麼道理我就我就說它在每一點都是一
有點沒道理但是我現在來看如果這個都是一的話我再算前面一個 t 減一怎麼算也是一樣阿
我這裡的某一個這裡 t 減一的某一點是什麼呢就是前面的所有的機率
那麼因此呢我現在如果把
如果那樣的話呢我現在是大 T 加一叫做大這個小 t 加一叫做大 T 嘛
這個叫做大 T 嘛那這個變成大 T 減一嘛
那如果這是這是這這個是大 T 的話我剛才已經設它都是一了
都不要看了就是這兩個乘起來加起來是不是等於這個呢對不對
這是我最後最後兩行的意思
假設這個都是一然後來算這一行那怎麼算呢這邊都是一嘛所以我就是把這個小 t 加一叫做大 T
於是於是這邊就都是一不用看了就是這兩個乘起來
然後呢這個 t 呢就變成是這個大 T 減一那你看這樣對不對呢
這是對的因為我就是把這是大 T 嘛我就把最後一個最後這一個 vector 放到每一個 state 去得到一個機率
然後分別乘上它的 a  i  j 就得到我的 i
所以呢譬如說把把這裡也有一個 o  t 阿
我這裡也有一個 o  t 阿我把這個 o  t 放到這個 state 去放到這個 state 去我都有一個機率
然後呢它呢可以跳過來可以跳過來可以跳過來阿
我就通通算進去阿把這些通通算起去所以我就把他們的機率
把這個 o  t 放到這些 state 裡面機率然後分別乘上這個 a  i  j 就是 given 這個 i 之後所有的可能
就是這樣子阿對阿嗯所以呢把這當成一就對了所以我們講說這個可以這樣設
嗯那麼這麼一來呢這兩個都合理於是我 beta 可以算了好當 beta 可以算之後
我們還沒說這個跟我們的 problem 有什麼關係
所以我們現在回來看當我的 forward 和 backward 都有了之後
我的第一件事情是可以把 forward 跟 backward  combine 起來
也就是 alpha  t 的 i 乘上 beta  t 的 i 兩個相乘會怎樣
我們剛才是用 forward 的話是在這張表上填出一個 alpha  t 的 i 來
我有一張表每一點都有一個數值就是 alpha  t 的 i
我現在做 backward 的話我又可以填一張表
上面每一點是 beta  t 的 i 我現在可以把這兩個相乘是第三張表 ok
這是第一張表這是第一張表這是第二張表第三張表是兩個的相乘 alpha  t 的 i  beta  t 的 i
這也是一張表那麼我們來看看這一張表是什麼意思
那這張表的意思其實很簡單
就是你看到全部的一到 t 全部的東西而時間 t 的時候是在 i 上面
 given 這個 Lambda 這個是 given  Lambda 那為什麼其實其實是很容易想像了
我仍然用剛才那一個圖那邊那個圖我如果這是這是 state  i 這是時間 t
我剛剛才 alpha  t 的 i 是這樣把這個機率算進來之後前面全部都有
對不對前面隨便怎麼樣都有這邊呢是在這個算進去這個是 alpha  t 的 i
那我 beta  t 的 i 是怎樣呢是我也是這個要在這裡但是我是算這後面的從 t 加一以後的
這是 beta  t 的 i
所以我這個再乘這個的話不就是把這兩個機率通通都算進來了嗎
於是我就是從從這個 o  one 一直算到 o  T
所有機率都都算進去了
除了在 t 的那點只有放在 i 上不可以 t 的那一點只可以在 i 上這邊沒有對不對
也就是說這一堆是不可以的這一堆是不可以的
除了這堆不可以這堆不可以之外其他全部都可以
然後我全部看到對不對那就是我這邊講的我看到全部的 o  one 到 o  T
除了在 T 的那點只有一個 i 以外其他我全部都看到了
那就是這兩個相乘的那就是我如果把這個 alpha 的表跟 beta 的表相乘得到第三張表的話
那個表上也是對每一個 t 每一個 i 都有一個值那個值就是這個意思
那個值就是這邊的意思就是我看到全部的
然後呢在 T 的時候等於 i 的
那這個說法你如果
我我想是很直覺的你可以想像就是這樣子因為我們已經講清楚它的意思就是這樣子
你如果覺得說我不太感覺它是這樣的話我們可以推一推
我們可以推一個簡單的假設我有一個我從 o  one  o  two 一直看到 o  t 的時候
 given 這個 Lambda 這是我的一個 event 叫做 a 我我我現在要推一下這個東西
就是推一下這個這個東西假設這個 event  a 就是在這個在這個 model 裡面我看到零到 T 的
然後還有一個呢我是看到 t 加一 t 加二一直看到大 T 的
這個叫做 b 也就是說我一個是從零看到 t 一個是從 t 加一開始看到大 T
這是 b 然後還有一個是 event 是 c 就是我在時間 t 要在 state  i 上面
這個是 c 我如果 given 這三個 event 的話那麼我要說是這樣子
就是 probability 的 a  b  c 的機率是什麼
就是 probability  of  a 跟 c 乘上 b  given  a  c
這個沒問題吧嗯我這個只是一個最簡單的條件機率的拆解
 a  b  c 要同時看到 a  b  c 三件事的話呢
我可以看到 a 跟 c 的然後乘上 given  a 跟 c 看到 b 的
那這樣的話呢這乘起來就是這個那如果是這樣的話那麼
當 b 跟 a 是 independent 的時候我們加一個條件
就是咳咳當 b 跟 a 是 independent 的話我這個 a 的條件可以拿掉
就變成 b  given  c
這個應該也是個很簡單的條件機率的的關係你應該記得就是
你學機率學過 given  x  given  y 如果它們兩個 independent 的話會怎樣
就是 x
這個 independent 的意思就是你給我另外一個東西的條件等於不給一樣
所以呢你根本就可以不要這個是你回去如果不記得回去查你的機率課本一定學過這個
所以呢如果是 independent 的話你可以把它拿掉那我這裡呢我說我們可以先假設 a 跟 b 是 independent
為什麼因為 a 是看到 t 的 b 是看到 t 加一以後的那麼我們現在並沒有假設
不同的時間上他們 o 有什麼關係我沒有講他們有什麼關係所以我們先假設他們是沒有關係的
讓他們是 independent 如果是這樣的話呢我這個就沒有了就跟剛才這個情形是一樣的
於是我就變成這樣當我變成這樣的時後你現在再來看這個是什麼
這個就是 alpha  t 的 i 那這個是什麼這就是 beta 　 t 的 i
何以見得你看看 alpha  t 的 i  alpha  t 的 i 的定義
就是這樣子那是不是 a 跟 c 就是 given  Lambda 裡面我看到一到 t 而且 t 在 i 上面對不對
就是 given 這個 lambda 我看到一到 t 而且 t 在 i 裡面所以呢就是 a 跟 c 這兩個在這裡的機率就是 alpha  t
那麼這個為什麼是 beta  t 呢那你再看 beta  t
就是我看到 t 加一以後的 given 這個東西
那就是我看到這堆東西 given 這個
所以是 b  given  c  ok 所以這個 b  given  c 就是這個
所以 alpha  t 的 i 跟 beta  t 的 i 相乘就是在這裡
而這個是什麼這個 a 這個 a  b  c 的機率就是我看到全部
也就是我底下的這個這個的這個或著這個就是我看到全部
看到全部裡面呢只有 t 的時候等於 i 別的沒有規定
我看到全部只有 t 的時候在 i 別的都沒有規定別的都可以那這就是 a  b  c
 ok 所以呢那我我用這個來講的話這個其實是在說推說剛才講的這個這個東西等於這個的意思
所以呢也就是這邊講有看到全部但是 t 要等於 i 或是說看到全部但是 t 要等於 i 的這個條件
那我等於是在講這個東西你如果是要推的話你如果不相信要用推的可以推就是用這個
那有一個條件就是 a 跟 b 要 independent
那麼你其實不要推也可以我們很直覺來看的話直接用這個圖來看幾乎就可以看出來是這樣子
好那麼到這裡我們可以回過頭來講我們現在再來看一下我剛才說 alpha 跟 beta 定義不太一樣是有原因的
第一個不太一樣的地方我們是說這個 t 在 i 的這個條件在 beta 是在這個槓的右邊
而在 alpha 的話呢是在這個槓的左邊為什麼會這樣你在這邊看就很清楚啦
這就是 c 嘛是 c 的這個東西在這裡的話是在算全部的機率是算進去的而這邊的話是算在 condition 這裡的
那麼這樣的這兩個相乘才會條件機率一乘才會乘到這邊來嘛
對不對嗯這條件機率兩個相乘會乘出乘出這樣來就是要讓一個在這個左邊一個在右邊這樣才會嘛
那就是 c 嘛所以當然要一個在左邊一個在右邊才可以那然後我們還有說一點就是還有一點不同是什麼呢
 alpha 的時候這個是 t 的話這個 t 有看到這個 o  t 在這個裡面
可是 beta 的時候呢如果這個 t 的話這個 t 不在裡面為什麼這樣
你這邊看也很清楚因為你這個只能算一次不能算兩次
所以那你這個 t 的時候在 i 的這個機率我歸到 alpha 來了我就不能再歸到 beta 去
只能算一次所以呢這個東西就只有在這邊不在那邊 ok
那這樣大概可以解釋我們剛才講的所有東西好於是我就得到這個了當我得到這個之後呢我其實可以做下一件事情就是
我剛才這個是 problem 　 one 要做的東西你如果看的話這是我的 problem 　 one 的要解的
我 problem  one 就是解這個嘛嗯就是算整個的 o 也就是所謂算整個的 o 就是我讓它所有的 path 所有 path 全部算進去
的機率或者所有的 state  sequence 全部算進去全不管怎麼走全部算進去那是什麼呢
我其實就是這邊講的我只要把這個東西 summation  over 所有的 n 就可以了
因為你現在這個東西已經是看到所有的我看到所有的 o 了但是呢我只有 i
時間 t 只有在 i 上面那我就把它 i 全部加起來嘛就是說我們剛才講我已經看到所有東西了
除了在 t 的時候呢這邊不可以這邊不可以只可以在這裡
那同理我也可以算另外一個 i 譬如這是 i  prime 我的是在這裡
我是在這裡那麼那我會得到一個 alpha  t 的 i 是這個 beta  t 的 i 是這個
那不可以的是什麼不不可以的是這個對不對
不可以的是這個那是另外一個那我把這個所有的 i  prime 全部加起來的時候就把這一行也都
每一個都可以了那不就全部都可以了嗎
對不對所以呢我現在如果把這個我現在如果把不管是這個也好或者這個也好那就是這個跟這個兩個式子
我都把它從 i 等於一到 n 全部加起來的話我把這個地方全部加起來的話那不就是全部了
就所有的都可能就所有 path 都算進去了所以我就得到這個那這個其實就是我們剛才 problem  one 的要解的東西
換句話說我現在如果有了 alpha  t 的 i 乘上 beta  t 的 i 這兩個都有了的話
我只要在任何一行去加都得到這個值你你回去看我們剛才 problem  one 的
的答案是怎麼做的 problem  one 是這麼做的我們剛才是
我如果算這個是 alpha  t 的 i 的話我是這樣一行一行算過來
等到最後一行最後一行算過來的時候我把它全部加起來
最後一行算回來是全部加起來就是我的答案
這是我們剛才 problem  one 的 forward  problem 呃 forward  algorithm 是這樣算的
那我現在說不見得要這樣因為我只要得到如果我現在這個表得到是 r 我我只要把 beta 算出來第二張表之後
把 alpha 跟 beta 相乘得到第三張表的話
那第三張表其實就是我們現在的底下的這個
當我有了這個第三張表的時候呢
我其實就任何一行 i 等於一到 n 去加 t 是那一個 t 是多少那一個 t 都沒有關係
任何一行的 i 一去加的話都得到它
所以呢我只要得到第三張表的時候
我隨便拿一行去加都可以假設說我的第三張表像這樣的話我在這一行全部加起來就是那個答案
那我也可以加這一行我也可以加這一行加起來都是那個答案
那就是我們這邊講的加起來都是這個東西因為如果是加這一行的話呢其實是說 ok
這一點要在這裡其他的都可以
對不對
那我只要把所有的通通加起來不就是全部嗎
那如果在這裡的話呢這裡的任何一點的話意思也是說這一點在這裡其他的都可以
對不對那我只要把它全部加起來就是嘛
就是全部所以我在任何一個 t 在 any  t 這個 t 隨便那一個都可以我只要把這個 i 通通加起來
就是我要這個東西
那也可以說就是只要我只要有 alpha  i  beta 這個 alpha  beta 相乘的這個表的話我任何一行去加
不管 t 是多少任何一樣去加都是這個答案
那如果是這樣的話你現在再回過頭來看我們剛才的 solution 其實就是什麼呢
我們剛才的 solution 就是當這個大這個小 t 等於大 T 的時候
當這個小 t 等於大 T 的時候我也可以嘛我們說任何一個 t 都可以嘛
所以小 t 等於大 T 也可以嘛
當小 t 等於大 T 的時候呢這個 beta 一律等於一阿對不對
這個 beta 等於一阿所以這邊都沒有啦就剩下這個
那就是我們剛才的那一式嘛
所以你看到我們 forward 的最後這個式子就剩下這個嘛因為那還有個 beta 大 T 等於一嘛
就沒有了嘛就剩下這樣所以這個就是我們剛才的那個
所以我們在 problem  one 的這個 forward  algorithm 的這個 solution 其實就是在這裡的我就是算最後那一行
等於是這個意思
那我們現在得到的是 general 的
呃得到是這個那其實每一行都可以
 ok 好那我們到此說了半天我們還沒有解 problem  two
我們現在只是在說這個這個 backward  beta  backward 的的這個 variable  beta
以及它怎麼算然後它跟 alpha 合起來有這樣的意思