那我們現在最後一頁講的是另外一件事情
這也是這個front end process 非常重要的就是end point detection 
那所謂的end point detection 
是說我們其實在說話的時候有非常豐富的時段是沒在說話的
也就是說我講話鐵定是這段時間在講之後呢這段沒有在講
這段在講這段沒有在講
那麼我沒有在講的時候是怎樣呢
中間一樣會有訊號的
為什麼就是noise 
只是說呢你這邊有的時候我的noise 繼續加上來就是了
也就是說我們在講話的時候
如果說我的我的voice 是這樣子的話
我沒有講話的時候呢我一樣有雜訊
這個雜訊在這邊繼續加上去
我們其實碰到是一個這樣的狀況
那麼
那所謂的這個end point detection 其實就是在你要知道哪裡是真的你的聲音哪裡是雜訊
那就recognition 而言
當然我們不能夠把不應該把這堆noise 當成是聲音拿去跑h m m 的話你跑出來就不對了
所以我們當然要知道把這個是在哪裡
那其他的原那其他的事情也是一樣
譬如說你打電話你的手機打電話的時候
你知道打電話時候是這樣子的
你講話的時候
你講話的時候
對方應該是聽的
除非他跟你吵架
然後呢
對方會講話呢應該是在你講完停下來的時候
這個時候你是聽的
然後等到你在什麼在在他講完後你才會在講
所以呢如你如果是打電話的話應該是一個這樣的情形
這兩個signal 是大概有超過一半的時間是silent 
那麼因此呢我們要降低我傳送的bit rate 很重要一件事情就是我要知道哪裡是在講話
然後我就送這一段
這段我就不要送了
我不但節省bit rate 而且我沒有不要送noise 
那像這些都一樣需要做這件事情就所謂的end point detection 
那這有另外一個名子就是所謂的voice 就是vad 就是這個voice activity detection 
你要在一堆noise 所充滿noise 環境裡面你要知道哪裡真的是voice 哪裡不是
那哪裡是真的有voice activity 哪裡沒有
喔
這就我們這邊要說的事情就是所謂的end point detection 
那這些並不好做
那麼一直到今天仍然是一個很重要的研究課題因為一直沒有標準的答案
沒有很好的solution 尤其如果你背景雜訊很厲害的時候
你的在在街上在什麼很吵雜的地方的話這非常難做的事情
那麼怎麼辦
基本上可以想像有人想簡單的辦法就是push to talk 或者是push and hold to talk 
一個簡單的辦法就是你讓你的東西有一個有一個按鍵
你一按之後開始講
那它就知道那算是聲音嗎
然後呢我講完再按一下
表示是關表示我不講了
sil
那這是用人手來幫助解決的辦法
那另外的辦法就是push and hold 就是你講的時候我按下去講完了放下來
那這個其實是很簡單但是有效的辦法
雖然讓user 很麻煩
那你知道這個我們今天這個電話打電話的時候這個這個這個語音信箱
據說從前一開始你要做語音信箱的時候有很大的困難
就是你你把你錄音錄進去的時候人家不曉得從哪裡開始
所以不曉的是哪一段
那過了很久有人很聰明他說
嗶一聲開始
那個那個從嗶一聲開始錄音那個嗶一聲就是告訴你end point 在哪裡
那從那個以後就語音信箱就可以解決了
那我們這裡也是一樣那那那個那個point 怎麼怎麼辦
那當然最好的辦法是讓它可以自動去聽嘛
所謂continued listening 就是你繼續在錄音但是我隨時自動判斷這裡開始
sil
如果可以自動判斷是最好啦
那怎麼做自動判斷呢我們這邊底下講的是一些自動判斷常用的方法
最簡單的就是energy threshold 
我就是取energy 
那假設有語音的話energy 比較大
沒有語音的話energy 比較小
noise 比較小所以我就可以就是用一個window 算那個win window 的energy 
然後那個window 不斷的移動過來
那我這個可能得到一個window 在我得到這個energy 在這邊的時候很小
當我window cover 到語音的時候就會慢慢變大
然後呢可能會比較大一點
如果是這樣的話我可以定一個threshold 
超過這個threshold 就算是語音哦
這是一個最簡單的辦法來做
就是energy threshold 
但是呢這個常常呢就是說到底哪裡是一個哪裡是哪裡是是這個threshold 呢
你可能是需要adaptive 
因為這個顯然是跟背景雜訊有關
我要在這個有一開機還沒開始講話的時候先錄當時的背景雜訊來計算一下那麼應該以哪個threshold 為準比較好
那這個辦法也有它明顯的弱點就是當我的背景雜訊變的很強
當然很可能背景雜訊很強跟這個一樣強你就沒有辦法分辨了
所以這是最簡單但是效果不見得好的方法
那不管怎樣這裡面有兩種可能的error 
一種是false accepts 
一種是false rejection 
什麼是false accepts 呢
就是
我們有兩種一種是false accepts 
一種是false rejection 
false accepts 是說
明明不是聲音而我以為是
譬如說我把它切成我把它切成從這裡開始
我就把這一堆不是語音的我把它accept 成為語音了
這就是所謂的false accepts 
那false rejection 是反過來
是說明明是語音的你把以為切掉了以為這個是noise 
那這個呢就是false rejection 
這是兩種不同的error 
那常常這兩者不容易得兼
那麼你如果這個把threshold 定的高的話
你很可能是會把聲音切掉
就是產生這種情形
你把threshold 定的低的話呢很可能會把noise 收進來就是這種情形
所以呢常常不容易得兼
那這時候怎麼辦呢
我們這邊講的就是說基本上我們是覺得false accepts 比較沒有關係
因為你如果把它弄進來的話我還有辦法把他拿掉
可是你如果這邊把它切掉就沒有了
所以這兩種error 在這裡是不效果是不同的
你把聲音切掉就沒有了你那個就一定沒有了你就一定是發生error 了
可你如是把noise 弄近來你也許還有別的方法再來處理這塊
所以呢就是false accepts 還有辦法來救回來
可是false rejection 就不行
因此呢我們基本上會希望呢是這個發生這個不要發生
所以我的rejection rate 低一點
我就盡量的這個這個threshold 低一點
那這樣的話呢我我盡量讓他這個發生而這個不要發生
這它的一個基本原則
那這個時候這個怎麼辦
一個最常用的辦法就是你加一個model 
叫做silence 或者noise 
就是說你的本來的每一個word 都有一個model 
你還有一個model 叫做silence 
那麼這個時候你就可以想像假設它是它是這裡面講的三個字的話講的三個word 
這是一個model 這是一個這是這三個word 其實你就把它當成前面還有一個silence 
所以呢我就可以讓這個這個我用這個noise 或者silence train 一個也是一個h m m 
那你就train 一個這個model 來
然後呢那麼讓它也是變成一個可能的word 可以接在word 的前面或者後面
那這是一個常用的辦法
那這個通常可以handle 一部分這樣子的問題
那底下的這個呢是在是在課本上它有一個他講的一個方法那蠻好的喔
不過這個這個在在這裡我這裡的reference 的這個的九點三的就是這個
這個就是我剛才講的這個
那它有一個方法
那麼我們簡單解釋一下就是它當成兩個state 
就好比是h m m 只有兩個state 一樣
這兩個state 就是一個是speech 一個是noise 
那你每一個frame 可以去算它是屬於這個還是屬於這個
如果現在是speech 的話呢下一個frame 可能還是下一個frame 可能還是
但是一講完我就會跳到silence 去
是silence 我可以繼續記住silence 然後我會跳回來
這樣就變成兩個state 的h m m 
你就可以去跑它的viterbi 你一樣跑viterbi 
那你就可以分出來對不對
你就是譬如說在這一段裡面它就是在這一個state 裡面跑
這邊就跳到另外一個state 去
這邊在跳另外一個state 過來
你就兩個state 的viterbi 
你可以讓他這樣子來跑
那這個時候呢你這兩個state 分別都可以train 它的gaussian 
用一堆gaussian mixture 
就是一堆gaussian function 
用我們平常的做法一樣
你都可以train 出
你現在只有兩個state 
就是只有兩個state 
只不過他們各自都可以回到他們自己來
然後它可以回來
這兩個state 
那每一個state 呢基本上都是一堆gaussian 
一樣的你就可以train 一堆一堆gaussian 
那這是另外一堆gaussian 
那那這些gaussian 裡面的的用什麼用energy 啦log energy delta energy 這些都這一類的東西當它的feature 
你就可以train 這種東西
然後你可以調裡面的parameter 
這些mean variance 都可以調
然後你就可以看到
他們跳來跳去
用這樣來來切這是一個比較比較複雜但是相當不錯的方法
你如果要看詳細在那個我剛剛講的那個課本那裡
ok 好我們今天上到這裡
